//* Error types

use num_derive::FromPrimitive;
use solana_program::{decode_error::DecodeError, program_error::ProgramError};
use thiserror::Error;

//* Errors that may be returned by the betting program.
#[derive(Clone, Debug, Eq, Error, FromPrimitive, PartialEq)]
pub enum BettingError {
    // 0.
    /// The account cannot be initialized because it is already being used.
    #[error(" state account already in use")]
    AlreadyInUse,
    /// The program address provided doesn't match the value generated by the program.
    #[error("Invalid program address generated from bump seed and key")]
    InvalidProgramAddress,
    /// The owner of the input isn't set to the program address generated by the program.
    #[error("Input account owner is not the program address")]
    InvalidOwner,
    /// The owner of the pool token output is set to the program address generated by the program.
    #[error("Output pool account owner cannot be the program address")]
    InvalidOutputOwner,
    /// The deserialization of the account returned something besides State::Mint.
    #[error("Deserialized account is not an SPL Token mint")]
    ExpectedMint,
    ///
    #[error("Invalid PDA ")]
    InvalidPDA,

    #[error("Invalid Token Account owner ")]
    InvalidTokenAccountOwner,

    #[error("Invalid MINT ")]
    InvalidMint,

    #[error("Illegal Action ")]
    IllegalAction,

    #[error("amount should be equal to rent amount ")]
    InvalidAmount,

    #[error("Invalid Winner account")]
    InvalidWinner,

    #[error("Invalid counter")]
    InvalidCounter,

    #[error("Invalid random number")]
    InvalidRandomNumber,

    #[error("Math Error")]
    MathError,

    #[error("Game Full")]
    GameFull,

    #[error("Unknown Player")]
    UnknownPlayer,

    #[error("Game Ended")]
    GameEnded,
}
impl From<BettingError> for ProgramError {
    fn from(e: BettingError) -> Self {
        ProgramError::Custom(e as u32)
    }
}
impl<T> DecodeError<T> for BettingError {
    fn type_of() -> &'static str {
        "Swap Error"
    }
}
